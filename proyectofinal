#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>

void graficadora(long int valorx[80], long int valory[80], int k, int rangoinicial, int rangofinal, int incremento)
{
    //codigo para abrir la ventana en maximo 
    SDL_Init( SDL_INIT_EVERYTHING );
    int window_width=0,window_height=0;
    SDL_Window *sdl_window=NULL;
    sdl_window = SDL_CreateWindow("title", 10, 30, window_width, window_height, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);
    SDL_MaximizeWindow(sdl_window);
    SDL_GetWindowSize(sdl_window, &window_width, &window_height);
    SDL_Quit( );

    SDL_Window *window = NULL; //Creamos un puntero de una ventana
    SDL_Renderer *paintbrush = NULL; //Creamos un puntero de renderer que va a ser el pincel
    long int ejey = 0; //Va a guardar el valor del pixel donde se va atrazar el eje de las 'y'
    long int ejex = 0; //Va a guardar el valor del pixel donde se va atrazar el eje de las 'x'
    
    char band = 'V'; //Para saber cuando cerrar la ventana
    const int WIDTH = window_width-40, HEIGHT = window_height-40; //Declaramos dos enteros, el ancho y largo de la ventana
    
    SDL_Init(SDL_INIT_EVERYTHING); //Inicia todo los sistemas de graficos de sdl, para poder utilizarlos
    TTF_Init(); //iniciamos la libreria de fuentes
    //Parametros que tiene la ventana, los dos primeros son por defecto, luego esta el ancho y la altura, y el ultimo muestra la ventana en la pantalla
    window = SDL_CreateWindow("Grafica", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN); 

    paintbrush = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED); //Parametros del renderer

    TTF_Font *font=TTF_OpenFont("simple_s.ttf",16); //abrimos la fuente
    SDL_Color color = {255,255,255}; //seleccionamos un color para las fuentes
        
    SDL_Surface *sur = NULL; //creamos un puntero de superficie
  
    SDL_Texture *text = NULL; //creamus una textura


    int maxx=valorx[k-1],minx=valorx[0]; //buscamos el valor maximo en 'x' y en 'y'
    int valy=0; //creamos un entero para almacenar el valor mayor en 'y' con valor absoluto
    if (abs(valorx[0]) < abs(rangofinal)) //si el valor del primero es menor que el rango final
        maxx = abs(rangofinal);
    else //de lo contrario
        maxx = abs(valorx[0]);
    
    for (int w = 0; w <= k - 1; w++) 
        if (abs(valory[w]) > abs(valy)) //si el valor es mayor que el almacenado
            valy = abs(valory[w]);

    long int miny=100000, maxy=-100000; //miny para almacenar el valor minimo en 'y' y maxy para almacenar el valor maximo en 'y'
    
    //for para almacenar el minimo y el maximo en 'y'
    for(int i=0;i<=k-1;i++)
    {
        if(valory[i]<miny)
            miny=valory[i];
        
        if(maxy<valory[i])
            maxy=valory[i];
    }

    int nx=0,ny=0; //nx para almacenar el numero de datos en 'x' y ny para almacenar el numero de datos en 'y'

    // contador de valores en x
    for(int i=rangoinicial;i<=rangofinal;i++)
        nx++;
    
    //  contador de valores en y
    for(int i=miny;i<=maxy;i++)
        ny++;
    
    float ajustex=0, ajustey=0; //ajustex para almacenar el valor correspondiente a cada valor en x y lo mismo para 'y'

                        
    int difx0=0;  //difx0 para contar la diferencia entre el numero mas cercano a 0 en x y el 0
    int dify0=0; //dify0 para contar la diferencia entre el numero mas cercano a 0 en x y el 0


    //contamos la diferencia
    if(valorx[k-1]<0)
        for(int i=valorx[k-1];i<0;i++)
            difx0++;
    else if(valorx[0] > 0)
        for(int i=valorx[0];i>0;i--)
            difx0++;

    if(maxy<0)
        for(int i=maxy;i<=0;i++)
            dify0++;
    else if(miny > 0)
        for(int i=miny;i>=0;i--)
            dify0++;
    

    ajustey=(HEIGHT*1.0)/((ny+dify0)*1.0); //calculamos el valor para cada dato de y
    
    ajustex=(WIDTH*1.0)/((nx+difx0)*1.0); //calculamos el valor para cada dato de x

    int n0x=0,n0y=0;

    for (int i=valorx[0];i<=0;i++)
    {
        n0x++;
    }

    for (int i=miny;i<=0;i++)
    {
        n0y++;
    }

    //calculamos el eje de y
    if(miny < 0 && maxy > 0)
    {
        if(n0y%2 == 0 && n0y!=2)
            ejey= ajustey * n0y;
        else
            ejey= (ajustey * n0y) - (ajustey/2);
    }
    else if(miny<0)
    {
        ejey= HEIGHT - 30;
    }
    else
    {
        ejey=30;
    }

    //calculamos el eje de x
    if(valorx[0]<0 && valorx[k-1]>0)
    {
        if(n0x%2 == 0 && n0x!=2)
            ejex= ajustex * n0x;
        else
            ejex= (ajustex * n0x) - (ajustex/2) ;
    }
    else if(valorx[0]<0 && valorx[k-1]<=0)
    {
        ejex= WIDTH-30;
    }
    else
    {
        ejex=30;
    }

    //le restamos el valor al alto
    ejey=HEIGHT-ejey;

    
    //imprimimos los ejes
    SDL_SetRenderDrawColor(paintbrush,0,0,0,SDL_ALPHA_OPAQUE);
    SDL_RenderClear(paintbrush);
    SDL_SetRenderDrawColor(paintbrush,255,255,255,SDL_ALPHA_OPAQUE);
    SDL_RenderDrawLine(paintbrush,0,ejey,WIDTH,ejey);
    SDL_RenderPresent(paintbrush);
    SDL_RenderDrawLine(paintbrush,ejex,0,ejex,HEIGHT);
    SDL_RenderPresent(paintbrush);
    
    //creamos un rectangulo para el texto
    SDL_Rect Rectangle;

    Rectangle.w=10;
    Rectangle.h=10;

    char miniy[30]="",maxiy[30]="";//miniy para almacenar el valor minimo de y, maxiy para almacenar el valor maximo en y
    char minix[30]="",maxix[30]="";//minix para almacenar el valor minimo de y, maxix para almacenar el valor maximo en y

    int text_miny=0,text_maxy=0; //text_miny para almacenar la altura del texto minimo y text_maxy para almacenar la altura del valor mayor en y
    int pto_y=0, pto_y2=0,pto_x=0,pto_x2=0; //variables para guardar los puntos de origen y destino en X y Y

    for (int pos = 0; pos <= k-2; pos++) 
    {
        if(valory[pos]==miny) //si es igual al numero menor guardo la posicion para imprimir el numero
        {
            if(valory[pos]<0 || valory[pos] > 0)
            {
                if(valory[pos]<0)
                    text_miny= ejey + ((abs(valory[pos]))*ajustey); //pto_y= ejey + ((abs(valory[pos])- dify0 )*ajustey);
                else
                    text_miny= ejey - ((valory[pos])*ajustey); //pto_y= ejey - ((valory[pos] -dify0)*ajustey);
            } 
            else
                text_miny=ejey;
        }
        if(valory[pos+1]==maxy) //si es igual al numero mayor guardo la posicion para imprimir el numero
        {
            if(valory[pos+1]<0 || valory[pos+1] > 0)
            {
                if(valory[pos+1]<0)
                    text_maxy= ejey + ((abs(valory[pos+1]))*ajustey); //pto_y2= ejey + ((abs(valory[pos+1])- dify0)*ajustey);
                else
                    text_maxy= ejey - ((valory[pos+1])*ajustey); //pto_y2= ejey - ((valory[pos+1]- dify0)*ajustey);
            } 
            else
                text_maxy=ejey;
        }
        if(valorx[pos]<0 || valorx[pos] > 0) //sino es 0
        {
            if(valorx[pos]<0)
                pto_x= ejex - ((abs(valorx[pos]))*ajustex); //pto_x= ejex - ((abs(valorx[pos])-difx0)*ajustex);
            else
                pto_x= ejex + ((valorx[pos])*ajustex); //pto_x= ejex + ((valorx[pos]-difx0)*ajustex);
        } 
        else //si es 0
        {
            //if(valorx[0]<0 && valorx[k-1]<0)
            //    pto_x=ejex + (ajustex*difx0);
            //else if(valorx[0]>0 && valorx[k-1]>0)
            //    pto_x=ejex - (ajustex*difx0);
            //else
                pto_x=ejex;
        }

        if(valorx[pos+1]<0 || valorx[pos+1] > 0) //sino es 0
        {
            if(valorx[pos+1]<0)
                pto_x2= ejex - ((abs(valorx[pos+1]))*ajustex); //pto_x2= ejex - ((abs(valorx[pos+1])-difx0)*ajustex);
            else
                pto_x2= ejex + ((valorx[pos+1])*ajustex);//pto_x2= ejex + ((valorx[pos]-difx0)*ajustex);
        } 
        else //si es 0
        {
         //   if(valorx[0]<0 && valorx[k-1]<0)
           //     pto_x2=ejex + (ajustex*difx0);
           // else if(valorx[0]>0 && valorx[k-1]>0)
             //   pto_x2=ejex - (ajustex*difx0);
            //else
                pto_x2=ejex;
        }
        if(valory[pos]<0 || valory[pos] > 0) //sino es 0
        {
            if(valory[pos]<0)
                pto_y= ejey + ((abs(valory[pos]))*ajustey); //pto_y= ejey + ((abs(valory[pos])- dify0 )*ajustey);
            else
                pto_y= ejey - ((valory[pos])*ajustey); //pto_y= ejey - ((valory[pos] -dify0)*ajustey);
        } 
        else //si es 0  
        {
           // if(miny<0 && maxy<0)
            //    pto_y=ejey + (ajustey*dify0);
            //else if(miny>0 && maxy>0)
              //  pto_y=ejey - (ajustey*dify0);
           // else
                pto_y=ejey;
        }

        if(valory[pos+1]<0 || valory[pos+1] > 0) //si es mayor o menor que 0
        {
            if(valory[pos+1]<0)
                pto_y2= ejey + ((abs(valory[pos+1]))*ajustey); //pto_y2= ejey + ((abs(valory[pos+1])- dify0)*ajustey);
            else
                pto_y2= ejey - ((valory[pos+1])*ajustey); //pto_y2= ejey - ((valory[pos+1]- dify0)*ajustey);
        } 
        else //si es 0
        {
            //if(miny<0 && maxy<0)
             //   pto_y2=ejey + (ajustey*dify0);
            //else if(miny>0 && maxy>0)
             //   pto_y2=ejey - (ajustey*dify0);
            //else
                pto_y2=ejey;
        }

        SDL_SetRenderDrawColor(paintbrush,138, 43, 226,SDL_ALPHA_OPAQUE);
        
        //imprimimos la linea
        SDL_RenderDrawLine(paintbrush,pto_x,pto_y,pto_x2,pto_y2);
        SDL_RenderPresent(paintbrush);
        
        //lineas de punto en x
        SDL_SetRenderDrawColor(paintbrush,238, 130, 238,SDL_ALPHA_OPAQUE);
        SDL_RenderDrawLine(paintbrush,pto_x,ejey-4,pto_x,ejey+4);
        SDL_RenderPresent(paintbrush);

        //lineas de punto en y
        SDL_RenderDrawLine(paintbrush,ejex-4,pto_y,ejex+4,pto_y);
        SDL_RenderPresent(paintbrush);

        SDL_Color color1 = {0,255,255};
        sur = TTF_RenderText_Solid(font,"x",color1);
        text = SDL_CreateTextureFromSurface(paintbrush,sur);
        Rectangle.w=10;
        Rectangle.h=10;
        Rectangle.x=pto_x-3;
        Rectangle.y=pto_y-5;
        SDL_RenderCopy(paintbrush,text,0,&Rectangle);
        SDL_RenderPresent(paintbrush);
    }
    //imprimimos la ultima linea
    SDL_SetRenderDrawColor(paintbrush,238, 130, 238,SDL_ALPHA_OPAQUE);
    SDL_RenderDrawLine(paintbrush,pto_x2,ejey-4,pto_x2,ejey+4);
    SDL_RenderPresent(paintbrush);
    SDL_RenderDrawLine(paintbrush,ejex-4,pto_y2,ejex+4,pto_y2);
    SDL_RenderPresent(paintbrush);
    
    //imprimir la ultima x
    Rectangle.w=10;
    Rectangle.h=10;
    Rectangle.x=pto_x2-3;
    Rectangle.y=pto_y2-5;
    SDL_RenderCopy(paintbrush,text,0,&Rectangle);
    SDL_RenderPresent(paintbrush);

    SDL_SetRenderDrawColor(paintbrush,255,0,0,SDL_ALPHA_OPAQUE);
    
    //imprimimos el valor maximo en X
    itoa(valorx[0],maxix,10);
    if(valorx[0]<0)
        pto_x= ejex - ((abs(valorx[0]))*ajustex);
    else
        pto_x= ejex + ((valorx[0])*ajustex);

    sur = TTF_RenderText_Solid(font,maxix,color);
    text = SDL_CreateTextureFromSurface(paintbrush,sur);
    Rectangle.w=15;
    Rectangle.h=10;
    if(ejey > HEIGHT-20)
    {
        Rectangle.x=pto_x;
        Rectangle.y=ejey-10;
    }
    else
    {
        Rectangle.x=pto_x;
        Rectangle.y=ejey+10;
    }

    SDL_SetRenderDrawColor(paintbrush,0,0,0,SDL_ALPHA_OPAQUE);

    SDL_RenderCopy(paintbrush,text,0,&Rectangle);

    SDL_RenderPresent(paintbrush);

    //imprimimos el valor minimo en X
    itoa(valorx[k-1],minix,10);
    if(valorx[k-1]<0)
        pto_x= ejex - ((abs(valorx[k-1]))*ajustex);
    else
        pto_x= ejex + ((valorx[k-1])*ajustex);
    sur = TTF_RenderText_Solid(font,minix,color);
    text = SDL_CreateTextureFromSurface(paintbrush,sur);
    Rectangle.w=15;
    Rectangle.h=10;
    if(ejey > HEIGHT-20)
    {
        Rectangle.x=pto_x;
        Rectangle.y=ejey-10;
    }
    else
    {
        Rectangle.x=pto_x;
        Rectangle.y=ejey+10;
    }

    SDL_SetRenderDrawColor(paintbrush,0,0,0,SDL_ALPHA_OPAQUE);

    SDL_RenderCopy(paintbrush,text,0,&Rectangle);

    SDL_RenderPresent(paintbrush);

    if(text_maxy!=text_miny)
    {
        //imprimimos el valor minimo en y
        itoa(miny,miniy,10);
        sur = TTF_RenderText_Solid(font,miniy,color);
        text = SDL_CreateTextureFromSurface(paintbrush,sur);
        Rectangle.w=15;
        Rectangle.h=10;
        Rectangle.x=ejex-20;
        Rectangle.y=text_miny;
        SDL_SetRenderDrawColor(paintbrush,0,0,0,SDL_ALPHA_OPAQUE);

        SDL_RenderCopy(paintbrush,text,0,&Rectangle);

        SDL_RenderPresent(paintbrush);
    }
    
    if(text_maxy!=text_miny)
    {
        //imprimimos el valor maximo en y
        itoa(maxy,maxiy,10);
        sur = TTF_RenderText_Solid(font,maxiy,color);
        text = SDL_CreateTextureFromSurface(paintbrush,sur);
        Rectangle.w=15;
        Rectangle.h=10;
        Rectangle.x=ejex-20;
        Rectangle.y=text_maxy;
        SDL_SetRenderDrawColor(paintbrush,0,0,0,SDL_ALPHA_OPAQUE);

        SDL_RenderCopy(paintbrush,text,0,&Rectangle);

        SDL_RenderPresent(paintbrush);
    }
    
    SDL_Event e; //Recibe evento de la ventana, (Mouse o Teclado)

    //Para cerrar la ventana
    while(band == 'V'){

        if(SDL_PollEvent(&e)){ //estÃ¡ recibiendo notificaciones de eventos segun el orden que ocurrieron.

            switch(e.type){ //Tipo de evento

                case SDL_QUIT: //Cerrar ventana dandole a la 'X'
                        band = 'F';
                        break; 
            }
            
        }
    }

    SDL_DestroyWindow(window); //Destruimos nuestra ventana para liberar la memoria
    SDL_DestroyRenderer(paintbrush); //Destruimos nuestro renderer para liberar memoria
    TTF_CloseFont(font); //cerramos la fuente
    SDL_Quit();  //quita el SDL

  return;
}
